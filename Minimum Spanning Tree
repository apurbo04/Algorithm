class Solution
{
	public:
int parent[1005];
int group_size[1005];
void dsu_initialize(int n)
{
        for (int i = 0; i < n; i++)
        {
                parent[i] = -1;
                group_size[i] = 1;
        }
}
int dsu_find(int node)
{
        if (parent[node] == -1)
                return node;
        int leader = dsu_find(parent[node]);
        parent[node] = leader;
        return leader;
}
void dsu_union_by_size(int node1, int node2)
{
        int leaderA = dsu_find(node1);
        int leaderB = dsu_find(node2);
        if (group_size[leaderA] > group_size[leaderB])
        {
                parent[leaderB] = leaderA;
                group_size[leaderA] += group_size[leaderB];
        }
        else
        {
                parent[leaderA] = leaderB;
                group_size[leaderB] += group_size[leaderA];
        }
}
class Edge
{
public:
        int u, v, w;
        Edge(int u, int v, int w)
        {
                this->u = u;
                this->v = v;
                this->w = w;
        }
};
static bool cmp(Edge a, Edge b)
{
        return a.w < b.w;
}
int spanningTree(int V, vector<vector<int>> adj[])
    {
        dsu_initialize(V);
        vector<Edge> EdgeList;
        for(int u = 0;u<V; u++)
        {
            for(vector<int> vec : adj[u])
            {
                int v = vec[0];
                int w = vec[1];
                EdgeList.push_back(Edge(u,v,w));
            }
        }
        sort(EdgeList.begin(), EdgeList.end(),cmp);
        
        int totalCost = 0;
        for (Edge ed : EdgeList)
        {
                int leaderU = dsu_find(ed.u);
                int leaderV = dsu_find(ed.v);
                if (leaderU == leaderV)
                        continue;
                else
                {
                        dsu_union_by_size(ed.u, ed.v);
                        totalCost += ed.w;
                }
        }
        return totalCost;
    }
};
