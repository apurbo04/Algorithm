#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int parent[N];
int group_size[N];
void dsu_initialize(int n)
{
        for (int i = 0; i < n; i++)
        {
                parent[i] = -1;
                group_size[i] = 1;
        }
}
int dsu_find(int node)
{
        if (parent[node] == -1)
                return node;
        int leader = dsu_find(parent[node]);
        parent[node] = leader;
        return leader;
}
void dsu_union_by_size(int n1, int n2)
{
        int lA = dsu_find(n1);
        int lB = dsu_find(n2);
        if (group_size[lA] > group_size[lB])
        {
                parent[lB] = lA;
                group_size[lA] += group_size[lB];
        }
        else
        {
                parent[lA] = lB;
                group_size[lB] += group_size[lA];
        }
}
class Edge
{
public:
        int u, v, w;
        Edge(int u, int v, int w)
        {
                this->u = u;
                this->v = v;
                this->w = w;
        }
};
bool cmp(Edge a, Edge b)
{
        return a.w < b.w;
}
int main()
{
        int n, e;
        cin >> n >> e;
        dsu_initialize(n);
        vector<Edge> edgeList;
        while (e--)
        {
                int u, v, w;
                cin >> u >> v >> w;
                edgeList.push_back(Edge(u, v, w));
        }
        sort(edgeList.begin(), edgeList.end(), cmp);
        int cost = 0;
        for (Edge ed : edgeList)
        {
                int leaderU = dsu_find(ed.u);
                int leaderV = dsu_find(ed.v);
                if (leaderU == leaderV)
                        continue;
                else
                {
                        dsu_union_by_size(ed.u, ed.v);
                        cost += ed.w;
                }
        }
        cout << cost;
        return 0;
}
